service: satheler-survey

provider:
  name: aws
  region: ${opt:region, 'sa-east-1'}
  stage: ${opt:stage, 'develop'}
  runtime: nodejs12.x
  stackName: ${self:provider.stage}-${self:service}
  apiName: ${self:provider.stage}-${self:service}
  timeout: 10
  memorySize: 256
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}

    APP_KEY: ${env:APP_KEY}
    APP_NAME: ${env:APP_NAME}

    HASH_DRIVER: ${env:HASH_DRIVER}

    DB_CONNECTION: aws
    DB_CLIENT: ${env:DB_CLIENT}

    DB_AWS_HOST: ${env:DB_AWS_HOST}
    DB_AWS_PORT: ${env:DB_AWS_PORT}
    DB_AWS_USER: ${env:DB_AWS_USER}
    DB_AWS_PASSWORD: ${env:DB_AWS_PASSWORD}
    DB_AWS_NAME: ${env:DB_AWS_NAME}

    DB_AZURE_HOST: ${env:DB_AZURE_HOST}
    DB_AZURE_PORT: ${env:DB_AZURE_PORT}
    DB_AZURE_USER: ${env:DB_AZURE_USER}
    DB_AZURE_PASSWORD: ${env:DB_AZURE_PASSWORD}
    DB_AZURE_NAME: ${env:DB_AZURE_NAME}

functions:
  app:
    handler: build/serverlessizer.handle
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          cors: true
          path: '/'
          method: any
      - http:
          cors: true
          path: '{proxy+}'
          method: any

package:
  include:
    - build/**

  exclude:
    - '**/*.ts'
    - node_modules/**
    - tmp/**
    - app/**

layers:
  NodeModules:
    name: ${self:provider.apiName}-layer
    path: tmp/layers
    description: "node_modules dependencies"

plugins:
  - serverless-offline
